<!DOCTYPE module SYSTEM "module.dtd">

<module name="nederdrone_yaw_dynamic" dir="rigid_body_model">
  <doc>
    <description>Angular acceleration estimation for Nederdrone rigid body yaw dynamic. 
        The model has been estimated using the 'robustfit' Matlab routine, which returns the coefficient of the least squared model. The model is defined as following:
        yaw_angular_acceleration = alpha_1 * (yaw_angular_speed_deg)^2 * sign(yaw_angular_speed_deg) + alpha_2 * propeller_contribution_PPRZ_CMD + 
                                   alpha_3 * propeller_derivative_contribution_PPRZ_CMD + alpha_4 * control_surfaces_contribution_deg.
        The input contributions are calculated given the input provided to the actuator from the controller and their respective dynamic.

    </description>
    
    <define name="ALPHA_1" value="-0.032"     description="Angular rate coefficient"/>
    <define name="ALPHA_2" value="0.0"        description="Propeller contribution"/>
    <define name="ALPHA_3" value="0.0368"     description="Propeller derivative contribution"/>
    <define name="ALPHA_4" value="4.652"      description="Control surface contribution"/>
    <define name="PROPELLER_POLE" value="18"  description="Pole propeller first order dynamic" />
    <define name="SERVO_POLE" value="50"      description="Pole servo first order dynamic" />


     </doc>

  <!-- <settings>
    <dl_settings name="System identification">
      <dl_settings name="Chirp input">
        <dl_setting min="0" max="1"    step="1" values="Inactive|Active" shortname="Chirp" var="chirp_active" type="uint8_t" module="system_identification/sys_id_chirp" handler="activate_handler"/>
        <dl_setting min="0" max="1"    step="1" values="Inactive|Active" shortname="Fade in" var="chirp_fade_in" type="uint8_t" module="system_identification/sys_id_chirp" handler="fade_in_activate_handler"/>
        <dl_setting min="0" max="1"    step="1" values="Inactive|Active" shortname="Exponential" var="chirp_exponential" type="uint8_t" module="system_identification/sys_id_chirp" handler="exponential_activate_handler"/>
        <dl_setting min="0"    max="5"    step="1"    shortname="Chirp axis"     var="chirp_axis"                    type="uint8_t" module="system_identification/sys_id_chirp" handler="axis_handler"/>
        <dl_setting min="0"    max="9600" step="100"  shortname="Amplitude"      var="chirp_amplitude"               type="int32_t" module="system_identification/sys_id_chirp"/>
        <dl_setting min="0"    max="0.5"    step="0.01" shortname="on-axis noise"  var="chirp_noise_stdv_onaxis_ratio" type="float"   module="system_identification/sys_id_chirp"/>
        <dl_setting min="0"    max="9600" step="50"   shortname="off-axis noise" var="chirp_noise_stdv_offaxis"      type="float"   module="system_identification/sys_id_chirp"/>
        <dl_setting min="0.05" max="20"    step="0.05" shortname="Fstart_hz"      var="chirp_fstart_hz"                   type="float"   module="system_identification/sys_id_chirp" handler="fstart_handler"/>
        <dl_setting min="0.1"  max="20"   step="0.1"  shortname="Fend_hz"        var="chirp_fstop_hz"                   type="float"   module="system_identification/sys_id_chirp" handler="fstop_handler"/>
        <dl_setting min="0"    max="100"  step="0.5"  shortname="Length_s"       var="chirp_length_s"                type="float"   module="system_identification/sys_id_chirp"/>
      </dl_settings>
    </dl_settings>
  </settings> -->

  <header>
    <file name="nederdrone_yaw_dynamic.h"/>
  </header>

  <init fun="yaw_dynamic_init()"/>
  <periodic fun="yaw_dynamic_run()" freq="500" autorun="TRUE"/> 
  <makefile>
    <file name="nederdrone_yaw_dynamic.c" />
  </makefile>
<!-- can I put freq="PERIODIC_FREQUENCY" so the system is synchronized with the INDI controller? -->
  <!-- <makefile>
    <file name="pprz_random.c" dir="math"/>
  </makefile> -->
</module>
